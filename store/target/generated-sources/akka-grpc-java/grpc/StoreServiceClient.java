
// Generated by Akka gRPC. DO NOT EDIT.
package grpc;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;

import io.grpc.ManagedChannel;
import io.grpc.MethodDescriptor;

import static grpc.StoreService.Serializers.*;

import scala.concurrent.ExecutionContext;


import akka.grpc.javadsl.SingleResponseRequestBuilder;


public abstract class StoreServiceClient extends StoreServiceClientPowerApi implements StoreService, AkkaGrpcClient {
  public static final StoreServiceClient create(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
    return new DefaultStoreServiceClient(settings, mat, ec);
  }

  protected final static class DefaultStoreServiceClient extends StoreServiceClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultStoreServiceClient(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
        this.settings = settings;
        this.mat = mat;
        this.ec = ec;
        this.clientState = new ClientState(
          settings,
          // TODO #733 remove cast once we update Akka
          akka.event.Logging$.MODULE$.apply(((ActorMaterializer)mat).system(), DefaultStoreServiceClient.class, akka.event.LogSource$.MODULE$.<DefaultStoreServiceClient>fromAnyClass()),
          mat,
          ec);
        this.options = NettyClientUtils.callOptions(settings);

        if (mat instanceof ActorMaterializer) {
          ((ActorMaterializer) mat).system().getWhenTerminated().whenComplete((v, e) -> close());
        }
      }

  
    
      private final SingleResponseRequestBuilder<grpc.PutRequest, grpc.PutReply> putRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(putDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<grpc.GetRequest, grpc.GetReply> getRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(getDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of put
         */
        public java.util.concurrent.CompletionStage<grpc.PutReply> put(grpc.PutRequest request) {
          return put().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer put(grpc.PutRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<grpc.PutRequest, grpc.PutReply> put()
        
        {
          return clientState.withChannel( this::putRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of get
         */
        public java.util.concurrent.CompletionStage<grpc.GetReply> get(grpc.GetRequest request) {
          return get().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer get(grpc.GetRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<grpc.GetRequest, grpc.GetReply> get()
        
        {
          return clientState.withChannel( this::getRequestBuilder);
        }
      

      
        private static MethodDescriptor<grpc.PutRequest, grpc.PutReply> putDescriptor =
          MethodDescriptor.<grpc.PutRequest, grpc.PutReply>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("store.StoreService", "Put"))
            .setRequestMarshaller(new ProtoMarshaller<grpc.PutRequest>(PutRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<grpc.PutReply>(PutReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<grpc.GetRequest, grpc.GetReply> getDescriptor =
          MethodDescriptor.<grpc.GetRequest, grpc.GetReply>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("store.StoreService", "Get"))
            .setRequestMarshaller(new ProtoMarshaller<grpc.GetRequest>(GetRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<grpc.GetReply>(GetReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



